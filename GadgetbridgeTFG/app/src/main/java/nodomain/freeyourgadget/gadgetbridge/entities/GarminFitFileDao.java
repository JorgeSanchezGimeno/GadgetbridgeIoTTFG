package nodomain.freeyourgadget.gadgetbridge.entities;
import android.os.Build;
import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import nodomain.freeyourgadget.gadgetbridge.entities.GarminFitFile;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GARMIN_FIT_FILE".
*/
public class GarminFitFileDao extends AbstractDao<GarminFitFile, Long> {

    public static final String TABLENAME = "GARMIN_FIT_FILE";

    /**
     * Properties of entity GarminFitFile.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DownloadTimestamp = new Property(1, long.class, "downloadTimestamp", false, "DOWNLOAD_TIMESTAMP");
        public final static Property DeviceId = new Property(2, long.class, "deviceId", false, "DEVICE_ID");
        public final static Property UserId = new Property(3, long.class, "userId", false, "USER_ID");
        public final static Property FileNumber = new Property(4, int.class, "fileNumber", false, "FILE_NUMBER");
        public final static Property FileDataType = new Property(5, int.class, "fileDataType", false, "FILE_DATA_TYPE");
        public final static Property FileSubType = new Property(6, int.class, "fileSubType", false, "FILE_SUB_TYPE");
        public final static Property FileTimestamp = new Property(7, long.class, "fileTimestamp", false, "FILE_TIMESTAMP");
        public final static Property SpecificFlags = new Property(8, int.class, "specificFlags", false, "SPECIFIC_FLAGS");
        public final static Property FileSize = new Property(9, int.class, "fileSize", false, "FILE_SIZE");
        public final static Property FileData = new Property(10, byte[].class, "fileData", false, "FILE_DATA");
    };

    private DaoSession daoSession;


    public GarminFitFileDao(DaoConfig config) {
        super(config);
    }
    
    public GarminFitFileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GARMIN_FIT_FILE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DOWNLOAD_TIMESTAMP\" INTEGER NOT NULL ," + // 1: downloadTimestamp
                "\"DEVICE_ID\" INTEGER NOT NULL ," + // 2: deviceId
                "\"USER_ID\" INTEGER NOT NULL ," + // 3: userId
                "\"FILE_NUMBER\" INTEGER NOT NULL ," + // 4: fileNumber
                "\"FILE_DATA_TYPE\" INTEGER NOT NULL ," + // 5: fileDataType
                "\"FILE_SUB_TYPE\" INTEGER NOT NULL ," + // 6: fileSubType
                "\"FILE_TIMESTAMP\" INTEGER NOT NULL ," + // 7: fileTimestamp
                "\"SPECIFIC_FLAGS\" INTEGER NOT NULL ," + // 8: specificFlags
                "\"FILE_SIZE\" INTEGER NOT NULL ," + // 9: fileSize
                "\"FILE_DATA\" BLOB);"); // 10: fileData
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_GARMIN_FIT_FILE_DEVICE_ID_USER_ID_FILE_NUMBER ON GARMIN_FIT_FILE" +
                " (\"DEVICE_ID\",\"USER_ID\",\"FILE_NUMBER\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GARMIN_FIT_FILE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GarminFitFile entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDownloadTimestamp());
        stmt.bindLong(3, entity.getDeviceId());
        stmt.bindLong(4, entity.getUserId());
        stmt.bindLong(5, entity.getFileNumber());
        stmt.bindLong(6, entity.getFileDataType());
        stmt.bindLong(7, entity.getFileSubType());
        stmt.bindLong(8, entity.getFileTimestamp());
        stmt.bindLong(9, entity.getSpecificFlags());
        stmt.bindLong(10, entity.getFileSize());
 
        byte[] fileData = entity.getFileData();
        if (fileData != null) {
            stmt.bindBlob(11, fileData);
        }
    }

    @Override
    protected void attachEntity(GarminFitFile entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GarminFitFile readEntity(Cursor cursor, int offset) {
        GarminFitFile entity = new GarminFitFile( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // downloadTimestamp
            cursor.getLong(offset + 2), // deviceId
            cursor.getLong(offset + 3), // userId
            cursor.getInt(offset + 4), // fileNumber
            cursor.getInt(offset + 5), // fileDataType
            cursor.getInt(offset + 6), // fileSubType
            cursor.getLong(offset + 7), // fileTimestamp
            cursor.getInt(offset + 8), // specificFlags
            cursor.getInt(offset + 9), // fileSize
            cursor.isNull(offset + 10) ? null : cursor.getBlob(offset + 10) // fileData
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GarminFitFile entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDownloadTimestamp(cursor.getLong(offset + 1));
        entity.setDeviceId(cursor.getLong(offset + 2));
        entity.setUserId(cursor.getLong(offset + 3));
        entity.setFileNumber(cursor.getInt(offset + 4));
        entity.setFileDataType(cursor.getInt(offset + 5));
        entity.setFileSubType(cursor.getInt(offset + 6));
        entity.setFileTimestamp(cursor.getLong(offset + 7));
        entity.setSpecificFlags(cursor.getInt(offset + 8));
        entity.setFileSize(cursor.getInt(offset + 9));
        entity.setFileData(cursor.isNull(offset + 10) ? null : cursor.getBlob(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GarminFitFile entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GarminFitFile entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDeviceDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getUserDao().getAllColumns());
            builder.append(" FROM GARMIN_FIT_FILE T");
            builder.append(" LEFT JOIN DEVICE T0 ON T.\"DEVICE_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN USER T1 ON T.\"USER_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected GarminFitFile loadCurrentDeep(Cursor cursor, boolean lock) {
        GarminFitFile entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Device device = loadCurrentOther(daoSession.getDeviceDao(), cursor, offset);
         if(device != null) {
            entity.setDevice(device);
        }
        offset += daoSession.getDeviceDao().getAllColumns().length;

        User user = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
         if(user != null) {
            entity.setUser(user);
        }

        return entity;    
    }

    public GarminFitFile loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<GarminFitFile> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<GarminFitFile> list = new ArrayList<GarminFitFile>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<GarminFitFile> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<GarminFitFile> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
