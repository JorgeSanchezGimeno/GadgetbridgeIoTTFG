package nodomain.freeyourgadget.gadgetbridge.entities;
import android.os.Build;
import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import nodomain.freeyourgadget.gadgetbridge.entities.XiaomiDailySummarySample;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "XIAOMI_DAILY_SUMMARY_SAMPLE".
*/
public class XiaomiDailySummarySampleDao extends AbstractDao<XiaomiDailySummarySample, Void> {

    public static final String TABLENAME = "XIAOMI_DAILY_SUMMARY_SAMPLE";

    /**
     * Properties of entity XiaomiDailySummarySample.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Timestamp = new Property(0, long.class, "timestamp", true, "TIMESTAMP");
        public final static Property DeviceId = new Property(1, long.class, "deviceId", true, "DEVICE_ID");
        public final static Property UserId = new Property(2, long.class, "userId", false, "USER_ID");
        public final static Property Timezone = new Property(3, Integer.class, "timezone", false, "TIMEZONE");
        public final static Property Steps = new Property(4, Integer.class, "steps", false, "STEPS");
        public final static Property HrResting = new Property(5, Integer.class, "hrResting", false, "HR_RESTING");
        public final static Property HrMax = new Property(6, Integer.class, "hrMax", false, "HR_MAX");
        public final static Property HrMaxTs = new Property(7, Integer.class, "hrMaxTs", false, "HR_MAX_TS");
        public final static Property HrMin = new Property(8, Integer.class, "hrMin", false, "HR_MIN");
        public final static Property HrMinTs = new Property(9, Integer.class, "hrMinTs", false, "HR_MIN_TS");
        public final static Property HrAvg = new Property(10, Integer.class, "hrAvg", false, "HR_AVG");
        public final static Property StressAvg = new Property(11, Integer.class, "stressAvg", false, "STRESS_AVG");
        public final static Property StressMax = new Property(12, Integer.class, "stressMax", false, "STRESS_MAX");
        public final static Property StressMin = new Property(13, Integer.class, "stressMin", false, "STRESS_MIN");
        public final static Property Standing = new Property(14, Integer.class, "standing", false, "STANDING");
        public final static Property Calories = new Property(15, Integer.class, "calories", false, "CALORIES");
        public final static Property Spo2Max = new Property(16, Integer.class, "spo2Max", false, "SPO2_MAX");
        public final static Property Spo2MaxTs = new Property(17, Integer.class, "spo2MaxTs", false, "SPO2_MAX_TS");
        public final static Property Spo2Min = new Property(18, Integer.class, "spo2Min", false, "SPO2_MIN");
        public final static Property Spo2MinTs = new Property(19, Integer.class, "spo2MinTs", false, "SPO2_MIN_TS");
        public final static Property Spo2Avg = new Property(20, Integer.class, "spo2Avg", false, "SPO2_AVG");
        public final static Property TrainingLoadDay = new Property(21, Integer.class, "trainingLoadDay", false, "TRAINING_LOAD_DAY");
        public final static Property TrainingLoadWeek = new Property(22, Integer.class, "trainingLoadWeek", false, "TRAINING_LOAD_WEEK");
        public final static Property TrainingLoadLevel = new Property(23, Integer.class, "trainingLoadLevel", false, "TRAINING_LOAD_LEVEL");
        public final static Property VitalityIncreaseLight = new Property(24, Integer.class, "vitalityIncreaseLight", false, "VITALITY_INCREASE_LIGHT");
        public final static Property VitalityIncreaseModerate = new Property(25, Integer.class, "vitalityIncreaseModerate", false, "VITALITY_INCREASE_MODERATE");
        public final static Property VitalityIncreaseHigh = new Property(26, Integer.class, "vitalityIncreaseHigh", false, "VITALITY_INCREASE_HIGH");
        public final static Property VitalityCurrent = new Property(27, Integer.class, "vitalityCurrent", false, "VITALITY_CURRENT");
    };

    private DaoSession daoSession;


    public XiaomiDailySummarySampleDao(DaoConfig config) {
        super(config);
    }
    
    public XiaomiDailySummarySampleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"XIAOMI_DAILY_SUMMARY_SAMPLE\" (" + //
                "\"TIMESTAMP\" INTEGER  NOT NULL ," + // 0: timestamp
                "\"DEVICE_ID\" INTEGER  NOT NULL ," + // 1: deviceId
                "\"USER_ID\" INTEGER NOT NULL ," + // 2: userId
                "\"TIMEZONE\" INTEGER," + // 3: timezone
                "\"STEPS\" INTEGER," + // 4: steps
                "\"HR_RESTING\" INTEGER," + // 5: hrResting
                "\"HR_MAX\" INTEGER," + // 6: hrMax
                "\"HR_MAX_TS\" INTEGER," + // 7: hrMaxTs
                "\"HR_MIN\" INTEGER," + // 8: hrMin
                "\"HR_MIN_TS\" INTEGER," + // 9: hrMinTs
                "\"HR_AVG\" INTEGER," + // 10: hrAvg
                "\"STRESS_AVG\" INTEGER," + // 11: stressAvg
                "\"STRESS_MAX\" INTEGER," + // 12: stressMax
                "\"STRESS_MIN\" INTEGER," + // 13: stressMin
                "\"STANDING\" INTEGER," + // 14: standing
                "\"CALORIES\" INTEGER," + // 15: calories
                "\"SPO2_MAX\" INTEGER," + // 16: spo2Max
                "\"SPO2_MAX_TS\" INTEGER," + // 17: spo2MaxTs
                "\"SPO2_MIN\" INTEGER," + // 18: spo2Min
                "\"SPO2_MIN_TS\" INTEGER," + // 19: spo2MinTs
                "\"SPO2_AVG\" INTEGER," + // 20: spo2Avg
                "\"TRAINING_LOAD_DAY\" INTEGER," + // 21: trainingLoadDay
                "\"TRAINING_LOAD_WEEK\" INTEGER," + // 22: trainingLoadWeek
                "\"TRAINING_LOAD_LEVEL\" INTEGER," + // 23: trainingLoadLevel
                "\"VITALITY_INCREASE_LIGHT\" INTEGER," + // 24: vitalityIncreaseLight
                "\"VITALITY_INCREASE_MODERATE\" INTEGER," + // 25: vitalityIncreaseModerate
                "\"VITALITY_INCREASE_HIGH\" INTEGER," + // 26: vitalityIncreaseHigh
                "\"VITALITY_CURRENT\" INTEGER," + // 27: vitalityCurrent
                "PRIMARY KEY (" +
                "\"TIMESTAMP\" ," +
                "\"DEVICE_ID\" ) ON CONFLICT REPLACE)" + ((Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) ? " WITHOUT ROWID;" : ";")
        );
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"XIAOMI_DAILY_SUMMARY_SAMPLE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, XiaomiDailySummarySample entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTimestamp());
        stmt.bindLong(2, entity.getDeviceId());
        stmt.bindLong(3, entity.getUserId());
 
        Integer timezone = entity.getTimezone();
        if (timezone != null) {
            stmt.bindLong(4, timezone);
        }
 
        Integer steps = entity.getSteps();
        if (steps != null) {
            stmt.bindLong(5, steps);
        }
 
        Integer hrResting = entity.getHrResting();
        if (hrResting != null) {
            stmt.bindLong(6, hrResting);
        }
 
        Integer hrMax = entity.getHrMax();
        if (hrMax != null) {
            stmt.bindLong(7, hrMax);
        }
 
        Integer hrMaxTs = entity.getHrMaxTs();
        if (hrMaxTs != null) {
            stmt.bindLong(8, hrMaxTs);
        }
 
        Integer hrMin = entity.getHrMin();
        if (hrMin != null) {
            stmt.bindLong(9, hrMin);
        }
 
        Integer hrMinTs = entity.getHrMinTs();
        if (hrMinTs != null) {
            stmt.bindLong(10, hrMinTs);
        }
 
        Integer hrAvg = entity.getHrAvg();
        if (hrAvg != null) {
            stmt.bindLong(11, hrAvg);
        }
 
        Integer stressAvg = entity.getStressAvg();
        if (stressAvg != null) {
            stmt.bindLong(12, stressAvg);
        }
 
        Integer stressMax = entity.getStressMax();
        if (stressMax != null) {
            stmt.bindLong(13, stressMax);
        }
 
        Integer stressMin = entity.getStressMin();
        if (stressMin != null) {
            stmt.bindLong(14, stressMin);
        }
 
        Integer standing = entity.getStanding();
        if (standing != null) {
            stmt.bindLong(15, standing);
        }
 
        Integer calories = entity.getCalories();
        if (calories != null) {
            stmt.bindLong(16, calories);
        }
 
        Integer spo2Max = entity.getSpo2Max();
        if (spo2Max != null) {
            stmt.bindLong(17, spo2Max);
        }
 
        Integer spo2MaxTs = entity.getSpo2MaxTs();
        if (spo2MaxTs != null) {
            stmt.bindLong(18, spo2MaxTs);
        }
 
        Integer spo2Min = entity.getSpo2Min();
        if (spo2Min != null) {
            stmt.bindLong(19, spo2Min);
        }
 
        Integer spo2MinTs = entity.getSpo2MinTs();
        if (spo2MinTs != null) {
            stmt.bindLong(20, spo2MinTs);
        }
 
        Integer spo2Avg = entity.getSpo2Avg();
        if (spo2Avg != null) {
            stmt.bindLong(21, spo2Avg);
        }
 
        Integer trainingLoadDay = entity.getTrainingLoadDay();
        if (trainingLoadDay != null) {
            stmt.bindLong(22, trainingLoadDay);
        }
 
        Integer trainingLoadWeek = entity.getTrainingLoadWeek();
        if (trainingLoadWeek != null) {
            stmt.bindLong(23, trainingLoadWeek);
        }
 
        Integer trainingLoadLevel = entity.getTrainingLoadLevel();
        if (trainingLoadLevel != null) {
            stmt.bindLong(24, trainingLoadLevel);
        }
 
        Integer vitalityIncreaseLight = entity.getVitalityIncreaseLight();
        if (vitalityIncreaseLight != null) {
            stmt.bindLong(25, vitalityIncreaseLight);
        }
 
        Integer vitalityIncreaseModerate = entity.getVitalityIncreaseModerate();
        if (vitalityIncreaseModerate != null) {
            stmt.bindLong(26, vitalityIncreaseModerate);
        }
 
        Integer vitalityIncreaseHigh = entity.getVitalityIncreaseHigh();
        if (vitalityIncreaseHigh != null) {
            stmt.bindLong(27, vitalityIncreaseHigh);
        }
 
        Integer vitalityCurrent = entity.getVitalityCurrent();
        if (vitalityCurrent != null) {
            stmt.bindLong(28, vitalityCurrent);
        }
    }

    @Override
    protected void attachEntity(XiaomiDailySummarySample entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public XiaomiDailySummarySample readEntity(Cursor cursor, int offset) {
        XiaomiDailySummarySample entity = new XiaomiDailySummarySample( //
            cursor.getLong(offset + 0), // timestamp
            cursor.getLong(offset + 1), // deviceId
            cursor.getLong(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // timezone
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // steps
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // hrResting
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // hrMax
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // hrMaxTs
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // hrMin
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // hrMinTs
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // hrAvg
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // stressAvg
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // stressMax
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // stressMin
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // standing
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // calories
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // spo2Max
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // spo2MaxTs
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // spo2Min
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // spo2MinTs
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // spo2Avg
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // trainingLoadDay
            cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22), // trainingLoadWeek
            cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23), // trainingLoadLevel
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // vitalityIncreaseLight
            cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25), // vitalityIncreaseModerate
            cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26), // vitalityIncreaseHigh
            cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27) // vitalityCurrent
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, XiaomiDailySummarySample entity, int offset) {
        entity.setTimestamp(cursor.getLong(offset + 0));
        entity.setDeviceId(cursor.getLong(offset + 1));
        entity.setUserId(cursor.getLong(offset + 2));
        entity.setTimezone(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setSteps(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setHrResting(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setHrMax(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setHrMaxTs(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setHrMin(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setHrMinTs(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setHrAvg(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setStressAvg(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setStressMax(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setStressMin(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setStanding(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setCalories(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setSpo2Max(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setSpo2MaxTs(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setSpo2Min(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setSpo2MinTs(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setSpo2Avg(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setTrainingLoadDay(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setTrainingLoadWeek(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
        entity.setTrainingLoadLevel(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
        entity.setVitalityIncreaseLight(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setVitalityIncreaseModerate(cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25));
        entity.setVitalityIncreaseHigh(cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26));
        entity.setVitalityCurrent(cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(XiaomiDailySummarySample entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(XiaomiDailySummarySample entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDeviceDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getUserDao().getAllColumns());
            builder.append(" FROM XIAOMI_DAILY_SUMMARY_SAMPLE T");
            builder.append(" LEFT JOIN DEVICE T0 ON T.\"DEVICE_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN USER T1 ON T.\"USER_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected XiaomiDailySummarySample loadCurrentDeep(Cursor cursor, boolean lock) {
        XiaomiDailySummarySample entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Device device = loadCurrentOther(daoSession.getDeviceDao(), cursor, offset);
         if(device != null) {
            entity.setDevice(device);
        }
        offset += daoSession.getDeviceDao().getAllColumns().length;

        User user = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
         if(user != null) {
            entity.setUser(user);
        }

        return entity;    
    }

    public XiaomiDailySummarySample loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<XiaomiDailySummarySample> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<XiaomiDailySummarySample> list = new ArrayList<XiaomiDailySummarySample>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<XiaomiDailySummarySample> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<XiaomiDailySummarySample> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
